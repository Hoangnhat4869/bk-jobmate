import React, {
  createContext,
  useState,
  useContext,
  ReactNode,
  useEffect,
  useCallback,
} from "react";
import AsyncStorage from "@react-native-async-storage/async-storage";

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho th√¥ng tin ng∆∞·ªùi d√πng
export interface Skill {
  id: string;
  name: string;
}

export interface Experience {
  id: string;
  title: string;
  company: string;
  description: string;
  startDate: string;
  endDate: string | null;
}

export interface Education {
  id: string;
  school: string;
  degree: string;
  field: string;
  startDate: string;
  endDate: string | null;
}

export interface UserProfile {
  id: string;
  name: string;
  email: string;
  avatar: string | null;
  title: string;
  bio: string;
  skills: Skill[];
  experiences: Experience[];
  education: Education[];
  isOnline: boolean;
}

// Mock data cho th√¥ng tin ng∆∞·ªùi d√πng
const mockUserProfile: UserProfile = {
  id: "1",
  name: "Nhat Truong",
  email: "nhat.truong@example.com",
  avatar: null,
  title: "Fresher Software Engineer",
  bio: "L√† m·ªôt sinh vi√™n nƒÉm cu·ªëi ƒëang h·ªçc ng√†nh Khoa h·ªçc M√°y t√≠nh t·∫°i tr∆∞·ªùng ƒê·∫°i h·ªçc B√°ch khoa TPHCM. T√¥i c√≥ kinh nghi·ªám trong ph√°t tri·ªÉn ·ª©ng d·ª•ng web v√† mobile. Ngo√†i ra, t√¥i c≈©ng c√≥ kinh nghi·ªám trong nghi√™n c·ª©u khoa h·ªçc v√† ph√°t tri·ªÉn tr√≠ tu·ªá nh√¢n t·∫°o. T√¥i lu√¥n t√¨m ki·∫øm c∆° h·ªôi ƒë·ªÉ h·ªçc h·ªèi v√† ph√°t tri·ªÉn b·∫£n th√¢n.",
  skills: [
    { id: "1", name: "C++" },
    { id: "2", name: "Python" },
    { id: "3", name: "Github" },
    { id: "4", name: "Machine Learning" },
    { id: "5", name: "JavaScript" },
    { id: "6", name: "Generative AI" },
    { id: "7", name: "Java" },
  ],
  experiences: [
    {
      id: "1",
      title: "Software Engineer Intern",
      company: "Bizzi Vietnam",
      description:
        "T√¥i ƒë√£ l√†m vi·ªác trong m·ªôt c√¥ng ty ph√°t tri·ªÉn ph·∫ßn m·ªÅm tr·ª±c tuy·∫øn v√† ƒë√£ ph√°t tri·ªÉn m·ªôt s·∫£n ph·∫©m m·ªõi cho c√¥ng ty. T√¥i ƒë√£ tham gia v√†o vi·ªác ph√°t tri·ªÉn m·ªôt trang web ƒë·ªÉ qu·∫£n l√Ω c√°c d·ª± √°n c·ªßa c√¥ng ty.",
      startDate: "2024-06",
      endDate: "2024-08",
    },
    {
      id: "2",
      title: "Fresher AI Product Engineer",
      company: "Bizzi Vietnam",
      description:
        "T√¥i ƒëang l√†m vi·ªác trong m·ªôt c√¥ng ty FinTech v√† tham gia v√†o vi·ªác ph√°t tri·ªÉn c√°c s·∫£n ph·∫©m AI cho c√¥ng ty.",
      startDate: "2024-09",
      endDate: "hi·ªán t·∫°i",
    },
  ],
  education: [
    {
      id: "1",
      school: "Ho Chi Minh City University of Technology",
      degree: "Bachelor",
      field: "Computer Science",
      startDate: "2021",
      endDate: "hi·ªán t·∫°i",
    },
  ],
  isOnline: true,
};

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho context
interface UserContextType {
  userProfile: UserProfile | null;
  isLoading: boolean;
  error: string | null;
  fetchUserProfile: () => Promise<void>;
  updateUserProfile: (data: Partial<UserProfile>) => Promise<void>;
  updateUserSkills: (skills: Skill[]) => Promise<void>;
  syncGoogleUserData: (googleUser: {
    id: string;
    email: string;
    displayName: string;
    photoURL?: string;
  }) => Promise<void>;
}

// T·∫°o context
const UserContext = createContext<UserContextType | undefined>(undefined);

// Hook ƒë·ªÉ s·ª≠ d·ª•ng context
export const useUser = () => {
  const context = useContext(UserContext);
  if (context === undefined) {
    throw new Error("useUser must be used within a UserProvider");
  }
  return context;
};

// Provider component
interface UserProviderProps {
  children: ReactNode;
}

export const UserProvider = ({ children }: UserProviderProps) => {
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  // Gi·∫£ l·∫≠p API call ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
  const fetchUserProfile = useCallback(async () => {
    setIsLoading(true);
    setError(null);

    try {
      // Gi·∫£ l·∫≠p API call v·ªõi timeout
      await new Promise((resolve) => setTimeout(resolve, 500));

      // Tr·∫£ v·ªÅ mock data
      setUserProfile(mockUserProfile);
    } catch (err) {
      setError("Failed to fetch user profile");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Gi·∫£ l·∫≠p API call ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  const updateUserProfile = useCallback(async (data: Partial<UserProfile>) => {
    setIsLoading(true);
    setError(null);

    try {
      // Gi·∫£ l·∫≠p API call v·ªõi timeout
      await new Promise((resolve) => setTimeout(resolve, 500));

      // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
      setUserProfile((prev) => (prev ? { ...prev, ...data } : null));
    } catch (err) {
      setError("Failed to update user profile");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Gi·∫£ l·∫≠p API call ƒë·ªÉ c·∫≠p nh·∫≠t k·ªπ nƒÉng
  const updateUserSkills = useCallback(async (skills: Skill[]) => {
    setIsLoading(true);
    setError(null);

    try {
      // Gi·∫£ l·∫≠p API call v·ªõi timeout
      await new Promise((resolve) => setTimeout(resolve, 500));

      // C·∫≠p nh·∫≠t k·ªπ nƒÉng
      setUserProfile((prev) => (prev ? { ...prev, skills } : null));
    } catch (err) {
      setError("Failed to update user skills");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Sync Google user data v·ªõi mock data
  const syncGoogleUserData = useCallback(
    async (googleUser: {
      id: string;
      email: string;
      displayName: string;
      photoURL?: string;
    }) => {
      console.log("üîÑ UserContext: Syncing Google user data");
      console.log("üìã Google user input:", googleUser);

      try {
        setIsLoading(true);
        setError(null);

        console.log("üìù Google user displayName:", googleUser.displayName);
        console.log("üìß Google user email:", googleUser.email);
        console.log("üñºÔ∏è Google user photoURL:", googleUser.photoURL);

        // T·∫°o user profile t·ª´ Google data + mock data
        const syncedProfile: UserProfile = {
          ...mockUserProfile, // Gi·ªØ mock data cho skills, experiences, etc.
          id: googleUser.id,
          name: googleUser.displayName,
          email: googleUser.email,
          avatar: googleUser.photoURL || null,
          title: `${googleUser.displayName} - Google User`,
          bio: `Xin ch√†o! T√¥i l√† ${googleUser.displayName}. T√¥i ƒë√£ ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Google v√† ƒëang kh√°m ph√° ·ª©ng d·ª•ng BK Jobmate.`,
        };

        console.log("üìù Final synced profile name:", syncedProfile.name);
        console.log("üìß Final synced profile email:", syncedProfile.email);
        console.log("üñºÔ∏è Final synced profile avatar:", syncedProfile.avatar);

        console.log("‚úÖ UserContext: Created synced profile:", syncedProfile);
        setUserProfile(syncedProfile);

        // Simulate API call delay
        await new Promise((resolve) => setTimeout(resolve, 100));

        console.log("‚úÖ UserContext: Google user data sync completed");
      } catch (err) {
        console.error("‚ùå UserContext: Failed to sync Google user data:", err);
        setError("Failed to sync Google user data");
      } finally {
        setIsLoading(false);
      }
    },
    []
  );

  // Check for Google sync data
  const checkGoogleSyncData = useCallback(async () => {
    try {
      const syncDataStr = await AsyncStorage.getItem("googleSyncData");
      if (syncDataStr) {
        console.log("üîç Found Google sync data in AsyncStorage");
        const syncData = JSON.parse(syncDataStr);
        console.log("üìã Google sync data:", syncData);

        // Sync the data
        await syncGoogleUserData(syncData);

        // Clear the sync data after use
        await AsyncStorage.removeItem("googleSyncData");
        console.log("üóëÔ∏è Cleared Google sync data from AsyncStorage");
      } else {
        console.log("‚ÑπÔ∏è No Google sync data found, using mock data");
        // Fetch regular mock profile
        await fetchUserProfile();
      }
    } catch (error) {
      console.error("‚ùå Error checking Google sync data:", error);
      // Fallback to regular fetch
      await fetchUserProfile();
    }
  }, [syncGoogleUserData, fetchUserProfile]);

  // T·ª± ƒë·ªông fetch th√¥ng tin ng∆∞·ªùi d√πng khi component mount
  useEffect(() => {
    checkGoogleSyncData();
  }, [checkGoogleSyncData]);

  const value = {
    userProfile,
    isLoading,
    error,
    fetchUserProfile,
    updateUserProfile,
    updateUserSkills,
    syncGoogleUserData,
  };

  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;
};
